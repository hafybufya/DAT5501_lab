# compound interest calculator that takes initial savings amount, years of saving, number of compounding periods and the annual interest rate.

#prompts variables
initial_savings_prompt = "Enter your initial amount of savings (Â£): "
time_prompt = "Enter the number of months you're saving for (whole numbers only): "
rate_prompt = "Enter the annual interest rate (decimal): "

#prompts error handling
prompt_error_handling_negative = "Amount cannot be below 0 "
prompt_error_handling_non_numeric = "Amount must be a numerical value"
prompt_error_handling_integer = "Amount must be a whole positive number"

prompt_error_handling_dp = "Please enter a value with at most 2 decimal places."
prompt_error_handling_rate= "Rate falls between 0 and 1"

#value for any of these variables > 0
min_number = 0
max_rate = 1

def initial_savings_amount():
    while True:
        try:
            initial_savings_amount = float(input( initial_savings_prompt))  
                #restrict user input to 2 dp
            if initial_savings_amount * 100 != int(initial_savings_amount * 100):
                print(f"{prompt_error_handling_dp}")
                continue        
                #user input > 0
            if min_number < initial_savings_amount:               
                return initial_savings_amount
            else:
                print(f"{prompt_error_handling_negative}")
        #users can't input strings        
        except ValueError:
            print(f"{prompt_error_handling_non_numeric}") 
initial_savings_amount = initial_savings_amount()

#futue improvemtnt ; allowing users to be either decimal or whole number(percentage)
def rate():
    while True:
        try:
            rate = float(input(rate_prompt))            
            if min_number < rate <=max_rate:               
                return rate               
            else:
                print(f"{prompt_error_handling_rate}")        
        except ValueError:
            print(f"{prompt_error_handling_non_numeric}") #unhardcode numbers

rate = rate()


def time():
    while True:
        try:
            time = int(input(time_prompt))            
            if min_number < time:               
                return time/12 #month/12 = year
            else:
                print(f"{prompt_error_handling_negative}")
        #users can't input non-integers        
        except ValueError:
            print(f"{prompt_error_handling_integer}") #unhardcode numbers

time= time()

def comp_in_calc(initial_savings_amount, rate, time):
    total_amount_saved = initial_savings_amount * (1 + rate) ** time
    return total_amount_saved


total_amount_saved = comp_in_calc(initial_savings_amount, rate, time)
print(f'Â£{total_amount_saved}')

